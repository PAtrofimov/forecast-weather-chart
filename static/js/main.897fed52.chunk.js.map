{"version":3,"sources":["redux/forecast/forecastTypes.js","redux/forecast/forecastReducer.js","redux/rootReducer.js","redux/forecast/forecastActions.js","components/BarVerticalChart.js","components/CitySearch.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["GET_FORECAST_REQUEST","GET_FORECAST_SUCCESS","GET_FORECAST_FAILURE","initialState","loading","search","data","error","reducer","state","action","type","payload","createRootReducer","combineReducers","forecast","forecastReducer","getForecastRequest","getForecastSuccess","getForecastFailure","BarVerticalChart","length","width","height","dataKey","fill","defaultProps","CitySearch","handleSearch","useState","city","setCity","input","useRef","onSubmit","e","preventDefault","attr","currentTarget","reduce","acc","cur","name","value","current","focus","className","placeholder","ref","onChange","target","App","forecastData","getForecast","actions","dispatch","message","axios","get","then","response","list","map","it","dt_txt","temp","main","catch","status","connect","preloadedState","bindActionCreators","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","compose","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById"],"mappings":"oNAAaA,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAuB,uBCI9BC,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,KAAM,GACNC,MAAO,IAsBMC,EAnBC,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAChD,OAAQA,EAAOC,MACb,KAAKX,EACH,OAAO,2BACFS,GADL,IAEEL,SAAS,IAEb,KAAKH,EAAuB,IAAD,EACAS,EAAOE,QAAxBN,EADiB,EACjBA,KAAMD,EADW,EACXA,OACd,OAAO,2BAAKI,GAAZ,IAAmBL,SAAS,EAAOE,OAAMD,SAAQE,MAAO,KAE1D,KAAKL,EACH,OAAO,2BAAKO,GAAZ,IAAmBL,SAAS,EAAOE,KAAM,GAAIC,MAAOG,EAAOE,UAE7D,QACE,OAAOH,ICpBEI,EAJW,kBACxBC,YAAgB,CACdC,SAAUC,K,wDCoCDC,EAAqB,WAChC,MAAO,CACLN,KAAMX,IAIGkB,EAAqB,SAACZ,GACjC,MAAO,CACLK,KAAMV,EACNW,QAASN,IAIAa,EAAqB,SAACZ,GACjC,MAAO,CACLI,KAAMT,EACNU,QAASL,I,QCtDPa,EAAmB,SAAC,GAAc,IAAZd,EAAW,EAAXA,KAC1B,OAAKA,GAAuB,GAAfA,EAAKe,OAKhB,cAAC,IAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKjB,KAAMA,EAAzC,SACE,cAAC,IAAD,CAAKkB,QAAQ,OAAOC,KAAK,cALpB,MAcXL,EAAiBM,aAAe,CAC9BpB,KAAM,IAGOc,Q,yBCkBAO,EAvCI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAgC,IAAlBvB,cAAkB,MAAT,GAAS,IAC5BwB,mBAASxB,GADmB,mBAC7CyB,EAD6C,KACvCC,EADuC,KAE9CC,EAAQC,iBAAO,MAgBrB,OACE,uBAAMC,SAfa,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAO,YAAIF,EAAEG,eAAeC,QAAO,SAACC,EAAKC,GAAS,IAC9CC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,OAAO,2BAAKH,GAAZ,kBAAkBE,EAAOC,MACxB,IACHf,EAAaS,EAAKP,MAClBE,EAAMY,QAAQC,SAQgBC,UAAU,4BAAxC,UACE,uBACEnC,KAAK,SACLoC,YAAY,iBACZL,KAAK,OACLC,MAAOb,EACPkB,IAAKhB,EACLiB,SAZe,SAACd,GACpB,IAAML,EAAOK,EAAEe,OAAOP,MACtBZ,EAAQD,IAWJgB,UAAU,iBAEZ,wBAAQnC,KAAK,SAASmC,UAAU,aAAhC,wBCvBN,SAASK,EAAT,GAAgF,IAAD,IAAhEC,aAAehD,EAAiD,EAAjDA,QAASE,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAkC,IAA3BF,cAA2B,MAApB,GAAoB,EAAfgD,EAAe,EAAfA,YAK9D,OAAOjD,EACL,oBAAI0C,UAAU,UAAd,qBAEA,uBAAMA,UAAU,eAAhB,UACE,qBAAKA,UAAU,wBAAf,SACE,cAAC,EAAD,CACExC,KAAMA,EACNsB,aAXa,SAACE,GACpBuB,EAAYvB,IAWNzB,OAAQA,MAIZ,qBAAKyC,UAAU,uBAAf,SACGvC,EACC,oBAAIuC,UAAU,QAAd,SAAuBvC,IAEvB,cAAC,EAAD,CAAkBD,KAAMA,SAOlC,IAMMgD,EAAU,CAAED,YHpCS,SAACvB,GAC1B,OAAO,SAACyB,GACN,IAAIC,EACA1B,GACFyB,EAAStC,KACTwC,IACGC,IADH,6DAE0D5B,EAF1D,4CAIG6B,MAAK,SAACC,GACL,IAAMtD,EAAOsD,EAAStD,KAAKuD,KAAKC,KAAI,SAACC,GACnC,MAAO,CACLrB,KAAMqB,EAAGC,OACTC,KAAMF,EAAGG,KAAKD,SAIlBV,EAASrC,EAAmB,CAAEb,OAAQyB,EAAMxB,aAE7C6D,OAAM,SAAC5D,GAEJiD,EAD4B,MAA1BjD,EAAMqD,SAASQ,OACP,iBAEA7D,EAAMiD,QAGlBD,EAASpC,EAAmBqC,QAIhCD,EAASpC,EADTqC,EAAU,4BGgBhBL,EAAIzB,aAAe,CACjB0B,aAAc,IAGDiB,ICnDwBC,EDmDxBD,eAnBS,SAAC5D,GACvB,MAAO,CACL2C,aAAc3C,EAAMM,aAMG,SAACwC,GAAD,OAAcgB,YAAmBjB,EAASC,KAWtDc,CAA6ClB,GE5C7CqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCRO,EFFUC,YACZpE,IACAyD,EACAY,YACEC,YACEC,IACAC,OEFRC,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.897fed52.chunk.js","sourcesContent":["export const GET_FORECAST_REQUEST = \"GET_FORECAST_REQUEST\";\r\nexport const GET_FORECAST_SUCCESS = \"GET_FORECAST_SUCCESS\";\r\nexport const GET_FORECAST_FAILURE = \"GET_FORECAST_FAILURE\";\r\n","import {\r\n  GET_FORECAST_FAILURE,\r\n  GET_FORECAST_REQUEST,\r\n  GET_FORECAST_SUCCESS,\r\n} from \"./forecastTypes\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  search: \"\",\r\n  data: [],\r\n  error: \"\",\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_FORECAST_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case GET_FORECAST_SUCCESS: {\r\n      const { data, search } = action.payload;\r\n      return { ...state, loading: false, data, search, error: \"\" };\r\n    }\r\n    case GET_FORECAST_FAILURE:\r\n      return { ...state, loading: false, data: [], error: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","// reducers.js\r\nimport { combineReducers } from \"redux\";\r\nimport forecastReducer from \"./forecast/forecastReducer\";\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    forecast: forecastReducer\r\n  });\r\nexport default createRootReducer;\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_FORECAST_REQUEST,\r\n  GET_FORECAST_SUCCESS,\r\n  GET_FORECAST_FAILURE,\r\n} from \"./forecastTypes\";\r\n\r\nexport const getForecast = (city) => {\r\n  return (dispatch) => {\r\n    let message;\r\n    if (city) {\r\n      dispatch(getForecastRequest());\r\n      axios\r\n        .get(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=bad46dfee1ae1125ec4faf31e63449de`\r\n        )\r\n        .then((response) => {\r\n          const data = response.data.list.map((it) => {\r\n            return {\r\n              name: it.dt_txt,\r\n              temp: it.main.temp,\r\n            };\r\n          });\r\n\r\n          dispatch(getForecastSuccess({ search: city, data }));\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 404) {\r\n            message = \"City not found\";\r\n          } else {\r\n            message = error.message;\r\n          }\r\n\r\n          dispatch(getForecastFailure(message));\r\n        });\r\n    } else {\r\n      message = \"Nothing was searched\";\r\n      dispatch(getForecastFailure(message));\r\n    }\r\n  };\r\n};\r\n\r\nexport const getForecastRequest = () => {\r\n  return {\r\n    type: GET_FORECAST_REQUEST,\r\n  };\r\n};\r\n\r\nexport const getForecastSuccess = (data) => {\r\n  return {\r\n    type: GET_FORECAST_SUCCESS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getForecastFailure = (error) => {\r\n  return {\r\n    type: GET_FORECAST_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Bar, BarChart } from \"recharts\";\r\n\r\nconst BarVerticalChart = ({ data }) => {\r\n  if (!data || data.length == 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <BarChart width={700} height={200} data={data}>\r\n      <Bar dataKey=\"temp\" fill=\"#8884d8\" />\r\n    </BarChart>\r\n  );\r\n};\r\n\r\nBarVerticalChart.propTypes = {\r\n  data: PropTypes.array,\r\n};\r\n\r\nBarVerticalChart.defaultProps = {\r\n  data: [],\r\n};\r\n\r\nexport default BarVerticalChart;\r\n","import React, { useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CitySearch = ({ handleSearch, search = \"\" }) => {\r\n  const [city, setCity] = useState(search);\r\n  const input = useRef(null);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const attr = [...e.currentTarget].reduce((acc, cur) => {\r\n      const { name, value } = cur;\r\n      return { ...acc, [name]: value };\r\n    }, {});\r\n    handleSearch(attr.city);\r\n    input.current.focus();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const city = e.target.value;\r\n    setCity(city);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"forecast-city-search-form\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Enter city ...\"\r\n        name=\"city\"\r\n        value={city}\r\n        ref={input}\r\n        onChange={handleChange}\r\n        className=\"search-input\"\r\n      ></input>\r\n      <button type=\"submit\" className=\"search-bth\">Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nCitySearch.propTypes = {\r\n  handleSearch: PropTypes.func,\r\n  search: PropTypes.string,\r\n};\r\n\r\nexport default CitySearch;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { getForecast } from \"./redux/forecast/forecastActions\";\nimport BarVerticalChart from \"./components/BarVerticalChart\";\nimport CitySearch from \"./components/CitySearch\";\n\nfunction App({ forecastData: {loading, data, error, search=\"\"}, getForecast }) {\n  const handleSearch = (city) => {\n    getForecast(city);\n  };\n\n  return loading ? (\n    <h2 className=\"loading\">Loading</h2>\n  ) : (\n    <main className=\"forecast-app\">\n      <div className=\"forecast-search-panel\">\n        <CitySearch\n          data={data}\n          handleSearch={handleSearch}\n          search={search}\n        />\n      </div>\n\n      <div className=\"forecast-chart-panel\">\n        {error ? (\n          <h2 className=\"error\">{error}</h2>\n        ) : (\n          <BarVerticalChart data={data} />\n        )}\n      </div>\n    </main>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    forecastData: state.forecast,\n  };\n};\n\nconst actions = { getForecast };\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(actions, dispatch);\n\nApp.propTypes = {\n  forecastData: PropTypes.object,\n  getForecast: PropTypes.func\n};\n\nApp.defaultProps = {\n  forecastData: [] \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport createRootReducer from \"./rootReducer\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    createRootReducer(),\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(\r\n        logger,\r\n        thunk\r\n      )\r\n    )\r\n  );\r\n\r\n  return store;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/configureStore\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}